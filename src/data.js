export const  questions = [
    { id:1, question: 'What is React?', answer: 'React is a JavaScript library developed by Facebook for building user interfaces.' },
    { id:2, question: 'What are the key features of React?', answer: 'Component-Based Architecture, Virtual DOM, JSX, state and props, Unidirectional Data Flow' },
    { id:3, question: 'What is JSX?', answer: 'JSX is a syntax extension for JavaScript that looks similar to XML or HTML. It allows you to write HTML elements inside JavaScript.' },
    { id:4, question: 'What is the Virtual DOM?', answer: 'React uses a virtual DOM (a lightweight copy of the actual DOM) to improve performance by applying only necessary changes to the real DOM.' },
    { id:5, question: 'How does React\'s reconciliation algorithm work?', answer: 'React\'s reconciliation algorithm efficiently updates the DOM by comparing the virtual DOM with the real DOM and only applying changes where necessary.' },
    { id:6, question: 'What are components in React?', answer: 'Components are reusable pieces of code that define a part of the UI. Components can be functional or class-based.' },
    { id:7, question: 'What is the difference between a class component and a functional component?', answer: 'Functional components are simple functions that return JSX, while class components are ES6 classes with additional features like state and lifecycle methods. Functional components are now preferred due to hooks.' },
    { id:8, question: 'What is the purpose of the render() method in class components?', answer: 'The render() method in class components returns JSX that describes what the UI should look like.' },
    { id:9, question: 'What is a React Hook?', answer: 'Hooks are special functions that let you use state and other React features in functional components.' },
    { id:10, question: 'How do you create a new React app?', answer: 'You can create a new React app using the command: npx create-react-app app-name.' },
    
    { id:11, question: 'What are controlled and uncontrolled components?', answer: 'Controlled components are components whose state is controlled by React, while uncontrolled components store their own state internally.' },
    { id:12, question: 'What is a higher-order component (HOC)?', answer: 'An HOC is a function that takes a component and returns a new component, allowing code reuse and logic abstraction.' },
    { id:13, question: 'How do you pass data between parent and child components?', answer: 'Data is passed from a parent to a child component via props, which are read-only values passed to the child component.' },
    { id:14, question: 'What is the purpose of the key prop in lists?', answer: 'The key prop helps React identify which items have changed, are added, or are removed. It improves performance by helping with efficient reconciliation.' },
    { id:15, question: 'How do you manage component state?', answer: 'State can be managed using the useState hook in functional components or by using the state property in class components.' },
    { id:16, question: 'What are React Fragments and why are they used?', answer: 'Fragments let you group multiple elements without adding extra nodes to the DOM, avoiding the need for unnecessary wrapper divs.' },
    { id:17, question: 'How do you handle component lifecycle events?', answer: 'In class components, lifecycle events are managed using methods like componentDidMount, componentDidUpdate, and componentWillUnmount. In functional components, these events are handled using the useEffect hook.' },
    { id:18, question: 'What is the difference between componentDidMount and useEffect?', answer: 'componentDidMount is a class-based lifecycle method that runs once after the component mounts. The useEffect hook can replicate this behavior in functional components.' },
    { id:19, question: 'What is prop drilling and how can you avoid it?', answer: 'Prop drilling is passing props through multiple components. You can avoid it by using the Context API or state management libraries like Redux.' },
    { id:20, question: 'What is the purpose of React.memo?', answer: 'React.memo is a higher-order component used to prevent unnecessary re-renders by memoizing functional components.' },
    
    { id:21, question: 'What is the useState hook and how do you use it?', answer: 'useState is a React hook that allows you to add state to functional components. It returns the current state and a function to update it.' },
    { id:22, question: 'How does the useEffect hook work?', answer: 'useEffect is a hook that allows you to perform side effects in functional components, such as fetching data or updating the DOM.' },
    { id:23, question: 'What is the useContext hook?', answer: 'The useContext hook allows you to access values from Reactâ€™s Context API directly in functional components without passing props down manually.' },
    { id:24, question: 'What is the useReducer hook used for?', answer: 'useReducer is used for managing more complex state logic, especially when state depends on the previous state.' },
    { id:25, question: 'How do you implement custom hooks?', answer: 'Custom hooks are functions that reuse logic between multiple components. They are created by writing a JavaScript function that uses built-in hooks.' },
    { id:26, question: 'What is the useRef hook and how is it used?', answer: 'useRef returns a mutable object that persists across renders. It can be used to reference DOM elements or store mutable values.' },
    { id:27, question: 'What is the useCallback hook and when should you use it?', answer: 'useCallback returns a memoized version of a function to prevent it from being re-created unless its dependencies change.' },
    { id:28, question: 'What is the useMemo hook and when should you use it?', answer: 'useMemo returns a memoized value to optimize expensive calculations by re-computing only when dependencies change.' },
    { id:29, question: 'How do you handle asynchronous operations with hooks?', answer: 'You can handle asynchronous operations inside useEffect by using async/await or promises, typically for data fetching or API calls.' },
    { id:30, question: 'What are the rules of hooks?', answer: 'Hooks must be called at the top level of functional components or custom hooks and cannot be called conditionally or inside loops.' },
    
    { id:31, question: 'What is Redux and how does it work with React?', answer: 'Redux is a state management library that helps manage the global state of an application by centralizing state and allowing predictable state transitions.' },
    { id:32, question: 'What is the useReducer hook used for in state management?', answer: 'useReducer is a hook used for managing local component state when the logic is more complex and involves multiple sub-values.' },
    { id:33, question: 'What is the purpose of Redux Thunk or Redux Saga?', answer: 'Redux Thunk allows you to write action creators that return functions, while Redux Saga uses generator functions to manage side effects more elegantly.' },
    { id:34, question: 'How do you use Context API for state management?', answer: 'Context API allows you to pass state across components without manually passing props at every level.' },
    { id:35, question: 'What is the difference between Redux and Context API?', answer: 'Redux is a more structured state management library with advanced features, while Context API is simpler and is mainly used for smaller, less complex state sharing.' },
    { id:36, question: 'How do you implement global state management in a React application?', answer: 'Global state management can be implemented using Context API or Redux, depending on the complexity of the state management needs.' },
    { id:37, question: 'What is the purpose of the Provider component in React?', answer: 'The Provider component allows React components to access the global state from the Context or Redux store.' },
    { id:38, question: 'How do you connect React components to Redux store?', answer: 'You can connect React components to the Redux store using the connect() function or the useSelector and useDispatch hooks.' },
    { id:39, question: 'What are the benefits of using redux-toolkit?', answer: 'redux-toolkit simplifies Redux development by providing built-in tools for creating actions, reducers, and handling side effects with less boilerplate code.' },
    { id:40, question: 'How can you handle side effects in React with Redux?', answer: 'Side effects in Redux can be handled using middleware like Redux Thunk or Redux Saga, which manage asynchronous logic.' },
    
    { id:41, question: 'What is React Router and how does it work?', answer: 'React Router is a library that allows you to implement dynamic routing in React apps, matching the UI with the URL.' },
    { id:42, question: 'How do you set up routing in a React application?', answer: 'Routing can be set up using React Router by importing Route, Switch, and BrowserRouter components and defining routes for different components.' },
    { id:43, question: 'What is the purpose of Route and Switch components in React Router?', answer: 'Route defines a path and component to render, while Switch ensures that only one route is rendered at a time.' },
    { id:44, question: 'How do you implement nested routes in React Router?', answer: 'Nested routes can be implemented by rendering Route components inside other Route components.' },
    { id:45, question: 'What are the different types of routing methods in React Router?', answer: 'The main routing methods include browser routing (BrowserRouter) and hash routing (HashRouter).' },
    { id:46, question: 'How do you handle route parameters in React Router?', answer: 'Route parameters can be accessed using the useParams hook in functional components or match.params in class components.' },
    { id:47, question: 'What is the useNavigate hook used for in React Router?', answer: 'useNavigate is used to programmatically navigate between routes in a functional component.' },
    { id:48, question: 'How do you implement route guards in React Router?', answer: 'Route guards can be implemented by conditionally rendering routes based on authentication or other conditions.' },
    { id:49, question: 'What is the purpose of useLocation hook in React Router?', answer: 'useLocation is a hook that gives you access to the current location object, which contains information about the URL.' },
    { id:50, question: 'How do you handle redirecting in React Router?', answer: 'Redirecting can be done using the Navigate component in React Router v6 or by using the history.push method in previous versions.' },
    
    { id:51, question: 'How do you optimize React component performance?', answer: 'React component performance can be optimized by using memoization, code splitting, lazy loading, and preventing unnecessary re-renders.' },
    { id:52, question: 'What is React\'s PureComponent and how does it help with performance?', answer: 'PureComponent is a base class that only re-renders a component if its props or state change, preventing unnecessary updates.' },
    { id:53, question: 'How do you use React.memo to prevent unnecessary re-renders?', answer: 'React.memo memoizes functional components, re-rendering them only if their props change.' },
    { id:54, question: 'What is code splitting and how can you implement it in React?', answer: 'Code splitting is a technique that loads only the necessary parts of a bundle at runtime. It can be implemented using React.lazy() and React Suspense.' },
    { id:55, question: 'What are React Suspense and Lazy loading?', answer: 'Suspense allows you to defer rendering part of the UI until some condition is met, and lazy loading allows components to be loaded only when needed.' },
    { id:56, question: 'How do you use React.lazy() to load components lazily?', answer: 'React.lazy() is used to dynamically import components and load them only when they are rendered for the first time.' },
    { id:57, question: 'How do you memoize expensive calculations in React?', answer: 'You can use the useMemo hook to memoize expensive calculations, preventing them from being recomputed on every render.' },
    { id:58, question: 'What is the purpose of shouldComponentUpdate method?', answer: 'shouldComponentUpdate is a lifecycle method in class components that allows you to control whether a component should re-render when its props or state change.' },
    { id:59, question: 'How do you use Profiler to measure performance in React?', answer: 'React Profiler is a tool that allows you to measure the performance of a React application by tracking the rendering times of components.' },
    { id:60, question: 'What are some common performance pitfalls in React applications?', answer: 'Common performance pitfalls include unnecessary re-renders, heavy computations during render, large bundle sizes, and inefficient state management.' },
    
    { id:61, question: 'What is Jest and how is it used with React?', answer: 'Jest is a testing framework for JavaScript that is commonly used with React to write unit tests, integration tests, and snapshot tests.' },
    { id:62, question: 'What is Enzyme and how is it used for testing React components?', answer: 'Enzyme is a testing utility for React that allows you to manipulate, traverse, and make assertions on React components\' output.' },
    { id:63, question: 'How do you write unit tests for React components?', answer: 'Unit tests for React components can be written using Jest or react-testing-library by rendering the component and asserting its behavior.' },
    { id:64, question: 'What is the purpose of react-testing-library?', answer: 'react-testing-library is a testing utility that focuses on testing the UI behavior of components, as users interact with them.' },
    { id:65, question: 'How do you mock API calls in tests?', answer: 'API calls can be mocked in tests using libraries like Jest or by using mock implementations for fetch or Axios.' },
    { id:66, question: 'What are snapshot tests and how do they work in React?', answer: 'Snapshot tests take a snapshot of a component\'s rendered output and compare it with future renders to detect changes.' },
    { id:67, question: 'How do you test asynchronous code in React?', answer: 'Asynchronous code in React can be tested using async/await syntax or promises in combination with Jest or react-testing-library.' },
    { id:68, question: 'What is the role of cleanup in testing React components?', answer: 'cleanup is used in tests to unmount React components and clear up any side effects or global variables between tests.' },
    { id:69, question: 'How do you test component interactions?', answer: 'Component interactions can be tested by simulating events like clicks, inputs, and other user actions, then checking if the component responds correctly.' },
    { id:70, question: 'What are some best practices for testing React applications?', answer: 'Best practices include writing tests that reflect user behavior, avoiding testing implementation details, using mocks for dependencies, and maintaining clear test cases.' },
    
    { id:71, question: 'What is server-side rendering (SSR) and how does it work with React?', answer: 'SSR is a technique where React components are rendered on the server and sent to the client as HTML, improving performance and SEO.' },
    { id:72, question: 'What is static site generation (SSG) and how is it different from SSR?', answer: 'SSG is a technique where HTML pages are generated at build time and served as static files. Unlike SSR, it doesn\'t happen on every request.' },
    { id:73, question: 'What is the purpose of getServerSideProps in Next.js?', answer: 'getServerSideProps is a function in Next.js that allows you to fetch data on each request and pass it to your component as props.' },
    { id:74, question: 'How do you handle authentication in a React application?', answer: 'Authentication in React can be handled using libraries like Firebase, JWT, or Auth0, in combination with context or Redux for state management.' },
    { id:75, question: 'What are React Suspense boundaries and how do they work?', answer: 'Suspense boundaries allow you to wrap parts of your UI and wait for asynchronous data to load, rendering a fallback UI in the meantime.' },
    { id:76, question: 'What is React Concurrent Mode?', answer: 'Concurrent Mode is an experimental feature that enables React to render multiple tasks in parallel, improving performance and responsiveness.' },
    { id:77, question: 'What are React Portals and how are they used?', answer: 'React Portals allow you to render components outside the main DOM hierarchy, which is useful for modals or popovers.' },
    { id:78, question: 'What is a context provider and how does it work?', answer: 'A context provider allows you to pass values to all descendant components without manually passing props through every component.' },
    { id:79, question: 'What are React Profiler API and its use cases?', answer: 'The Profiler API helps you measure and analyze the performance of React components by tracking their render times.' },
    { id:80, question: 'How do you manage form state in React?', answer: 'Form state in React can be managed using the useState hook, form libraries like Formik, or controlled/uncontrolled components.' },
    
    { id:81, question: 'What is component composition in React?', answer: 'Component composition is a design pattern in React where components are combined and composed to build more complex UIs.' },
    { id:82, question: 'How do you implement error boundaries in React?', answer: 'Error boundaries are React components that catch JavaScript errors in their child components and display a fallback UI.' },
    { id:83, question: 'What is the importance of separating presentational and container components?', answer: 'Separating presentational and container components helps in organizing code better, as presentational components handle UI, while container components manage data and logic.' },
    { id:84, question: 'How do you design a scalable component architecture?', answer: 'A scalable component architecture involves using reusable components, separating concerns, modularizing the code, and following best practices for maintainability.' },
    { id:85, question: 'What is a component library and how do you create one?', answer: 'A component library is a collection of reusable components. You can create one by building shared components and publishing them as a package.' },
    { id:86, question: 'What are the best practices for organizing a large React application?', answer: 'Best practices include structuring files by feature, using a state management solution, writing reusable components, and following a consistent coding style.' },
    { id:87, question: 'How do you handle global styles in React?', answer: 'Global styles can be handled using CSS, CSS-in-JS libraries, or styled-components to ensure consistent styling across the app.' },
    { id:88, question: 'What is the role of design systems in React development?', answer: 'Design systems provide a consistent set of UI components and guidelines that help in maintaining uniformity in design across the application.' },
    { id:89, question: 'How do you manage and handle theming in React?', answer: 'Theming in React can be handled by using context or a theming library to dynamically switch styles based on the selected theme.' },
    { id:90, question: 'What are some strategies for handling complex state logic in React components?', answer: 'Strategies include breaking down state logic into smaller pieces, using the useReducer hook, or adopting state management libraries like Redux or MobX.' },
    
    { id:91, question: 'What is the difference between client-side and server-side React applications?', answer: 'Client-side React apps render on the client\'s browser, while server-side apps render on the server and send HTML to the client.' },
    { id:92, question: 'How do you handle accessibility in React applications?', answer: 'Accessibility can be improved by using semantic HTML elements, ARIA attributes, keyboard navigation, and following best practices like WCAG guidelines.' },
    { id:93, question: 'What are some common anti-patterns in React?', answer: 'Common anti-patterns include overusing state, prop drilling, excessive re-renders, and not using keys in lists.' },
    { id:94, question: 'What are the advantages and disadvantages of using React?', answer: 'Advantages include component reusability, fast rendering, and a large ecosystem. Disadvantages include a steep learning curve and rapid changes in the library.' },
    { id:95, question: 'How do you handle file uploads in React?', answer: 'File uploads can be handled by using controlled input fields and submitting the file data to an API via FormData or libraries like Axios.' },
    { id:96, question: 'How do you integrate third-party libraries with React?', answer: 'Third-party libraries can be integrated by importing them and using them inside components, ensuring compatibility with React\'s lifecycle methods.' },
    { id:97, question: 'What is the useImperativeHandle hook and when should you use it?', answer: 'useImperativeHandle customizes the instance value that is exposed to parent components when using ref in functional components.' },
    { id:98, question: 'How do you handle responsive design in React?', answer: 'Responsive design can be handled using CSS media queries, CSS-in-JS libraries, or utility libraries like React-responsive to handle different screen sizes.' },
    { id:99, question: 'What are controlled vs uncontrolled components in React?', answer: 'Controlled components are those whose form elements are controlled by React state, while uncontrolled components manage their own internal state using refs.' },
    { id:100, question: 'How do you handle data fetching and caching in React applications?', answer: 'Data fetching and caching can be handled using hooks like useEffect, libraries like Axios or SWR, or caching solutions like React Query.' },
  ];
  
  